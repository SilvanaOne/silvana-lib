// This file is auto-generated by @hey-api/openapi-ts

import type { Options as ClientOptions, TDataShape, Client } from '@hey-api/client-fetch';
import type { LaunchNftCollectionData, LaunchNftCollectionResponse, LaunchNftCollectionError, LaunchTokenData, LaunchTokenResponse, LaunchTokenError, GetContractInfoData, GetContractInfoResponse, GetContractInfoError, GetNftInfoData, GetNftInfoResponse, GetNftInfoError, GetNftV2InfoData, GetNftV2InfoResponse, GetNftV2InfoError, FaucetData, FaucetResponse2, FaucetError, GetTokenInfoData, GetTokenInfoResponse, GetTokenInfoError, GetTokenBalanceData, GetTokenBalanceResponse, GetTokenBalanceError, GetNonceData, GetNonceResponse, GetNonceError, ProveData, ProveResponse, ProveError, GetProofData, GetProofResponse, GetProofError, SendTransactionData, SendTransactionResponse, SendTransactionError, TxStatusData, TxStatusResponse, TxStatusError, MintTokensData, MintTokensResponse, MintTokensError, MintNftData, MintNftResponse, MintNftError, TransferTokensData, TransferTokensResponse, TransferTokensError, AirdropTokensData, AirdropTokensResponse, AirdropTokensError, RedeemTokensData, RedeemTokensResponse, RedeemTokensError, BurnTokensData, BurnTokensResponse, BurnTokensError, TokenBidData, TokenBidResponse, TokenBidError, TokenOfferData, TokenOfferResponse, TokenOfferError, BuyTokensData, BuyTokensResponse, BuyTokensError, SellTokensData, SellTokensResponse, SellTokensError, WithdrawTokenBidData, WithdrawTokenBidResponse, WithdrawTokenBidError, WithdrawTokenOfferData, WithdrawTokenOfferResponse, WithdrawTokenOfferError, UpdateTokenBidWhitelistData, UpdateTokenBidWhitelistResponse, UpdateTokenBidWhitelistError, UpdateTokenOfferWhitelistData, UpdateTokenOfferWhitelistResponse, UpdateTokenOfferWhitelistError, UpdateTokenAdminWhitelistData, UpdateTokenAdminWhitelistResponse, UpdateTokenAdminWhitelistError } from './types.gen.js';
import { client as _heyApiClient } from './client.gen.js';

export type Options<TData extends TDataShape = TDataShape, ThrowOnError extends boolean = boolean> = ClientOptions<TData, ThrowOnError> & {
    /**
     * You can provide a client instance returned by `createClient()` instead of
     * individual options. This might be also useful if you want to implement a
     * custom client.
     */
    client?: Client;
    /**
     * You can pass arbitrary values through the `meta` object. This can be
     * used to access values that aren't defined as part of the SDK function.
     */
    meta?: Record<string, unknown>;
};

/**
 * Deploy a new NFT Collection contract.
 * The `launch` endpoint is used to deploy a new NFT Collection on the Mina blockchain.
 * It allows users to create a new NFT Collection with customizable parameters.
 *
 */
export const launchNftCollection = <ThrowOnError extends boolean = false>(options: Options<LaunchNftCollectionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LaunchNftCollectionResponse, LaunchNftCollectionError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/nft/launch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Deploy a new fungible token contract.
 * The `launch` endpoint is used to deploy a new fungible token on the Mina blockchain.
 * It allows users to create a new token with customizable parameters such as symbol,
 * decimals, URI, and admin contract type (standard or advanced).
 *
 */
export const launchToken = <ThrowOnError extends boolean = false>(options: Options<LaunchTokenData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<LaunchTokenResponse, LaunchTokenError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/token/launch',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve contract info
 * Retrieves detailed information about a contract.
 */
export const getContractInfo = <ThrowOnError extends boolean = false>(options: Options<GetContractInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetContractInfoResponse, GetContractInfoError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/info/contract',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve NFT Info
 * Retrieves detailed information about a Mina NFT V3 (NFT standard).
 */
export const getNftInfo = <ThrowOnError extends boolean = false>(options: Options<GetNftInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetNftInfoResponse, GetNftInfoError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/info/nft',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve NFT Info
 * Retrieves detailed information about a Mina NFT V2.
 */
export const getNftV2Info = <ThrowOnError extends boolean = false>(options: Options<GetNftV2InfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetNftV2InfoResponse, GetNftV2InfoError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/info/nft-v2',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Request Funds from Faucet
 * Requests funds from the faucet for testing purposes.
 */
export const faucet = <ThrowOnError extends boolean = false>(options: Options<FaucetData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<FaucetResponse2, FaucetError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/faucet',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve information about a fungible token.
 * The `info` endpoint retrieves detailed information about a specific fungible token deployed on the Mina blockchain.
 *
 */
export const getTokenInfo = <ThrowOnError extends boolean = false>(options: Options<GetTokenInfoData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetTokenInfoResponse, GetTokenInfoError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/info/token',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve the balance of a specific token for an address.
 * The `balance` endpoint retrieves the balance of a specific fungible token for a given Mina address.
 *
 */
export const getTokenBalance = <ThrowOnError extends boolean = false>(options: Options<GetTokenBalanceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetTokenBalanceResponse, GetTokenBalanceError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/info/balance',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve the nonce for an address
 * The `nonce` endpoint retrieves the nonce for a given Mina address, taking into account the pending transactions.
 *
 */
export const getNonce = <ThrowOnError extends boolean = false>(options: Options<GetNonceData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetNonceResponse, GetNonceError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/info/nonce',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Generate proofs for signed token transactions.
 * The `prove` endpoint initiates the proof generation process for a set of signed token transactions.
 * It returns a job ID which can be used to check the status and retrieve the proofs or tx hashes using the `/proof` endpoint.
 *
 */
export const prove = <ThrowOnError extends boolean = false>(options: Options<ProveData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<ProveResponse, ProveError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/transaction/prove',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Check the status of a proof generation job and retrieve proofs.
 * The `proof` endpoint allows you to check the status of a proof generation job initiated via the `/prove` endpoint.
 * It returns the status of the job and the proofs or tx hashes if they are ready.
 *
 */
export const getProof = <ThrowOnError extends boolean = false>(options: Options<GetProofData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<GetProofResponse, GetProofError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/transaction/proof',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Send a transaction to the Mina blockchain.
 * The `send` endpoint allows you to send a transaction to the Mina blockchain.
 *
 */
export const sendTransaction = <ThrowOnError extends boolean = false>(options: Options<SendTransactionData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SendTransactionResponse, SendTransactionError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/transaction/send',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Retrieve the status of a transaction by its hash.
 * The `tx-status` endpoint allows you to check the current status of a transaction on the Mina blockchain by providing the transaction hash. It returns whether the transaction has been applied, failed, or is still pending.
 *
 */
export const txStatus = <ThrowOnError extends boolean = false>(options: Options<TxStatusData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TxStatusResponse, TxStatusError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/transaction/status',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Mint new tokens to a specified address.
 * The `mint` endpoint allows authorized users to mint new tokens of a fungible token on the Mina blockchain.
 * This transaction increases the total supply of the token by creating new tokens and assigning them to a specified address.
 * The sender must have the authority to mint tokens, typically the admin of the token contract.
 *
 */
export const mintTokens = <ThrowOnError extends boolean = false>(options: Options<MintTokensData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MintTokensResponse, MintTokensError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/token/mint',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Mint new NFT to a specified address.
 * The `mint` endpoint allows authorized users to mint new NFT on the Mina blockchain.
 * This transaction creates new NFT.
 * The sender must have the authority to mint NFTs, typically the admin of the NFT contract.
 *
 */
export const mintNft = <ThrowOnError extends boolean = false>(options: Options<MintNftData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<MintNftResponse, MintNftError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/nft/mint',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Transfer tokens from one address to another.
 * The `transfer` endpoint allows users to transfer tokens of a fungible token on the Mina blockchain from one address to another.
 * The sender must have sufficient balance and appropriate permissions to perform the transfer.
 *
 */
export const transferTokens = <ThrowOnError extends boolean = false>(options: Options<TransferTokensData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TransferTokensResponse, TransferTokensError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/token/transfer',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Distribute tokens to multiple addresses via airdrop.
 * Allows users to distribute tokens to multiple addresses in a single transaction.
 * This is efficient for distributing tokens during events like token launches or community rewards.
 *
 */
export const airdropTokens = <ThrowOnError extends boolean = false>(options: Options<AirdropTokensData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<AirdropTokensResponse, AirdropTokensError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/token/airdrop',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Redeem tokens for a MINA (applicable for Fungible Tokens with Bonding Curve Admin)
 * The `redeem` endpoint allows users to redeem tokens of a fungible token on the Mina blockchain for a MINA.
 * The sender must have sufficient balance and appropriate permissions to perform the transfer.
 *
 */
export const redeemTokens = <ThrowOnError extends boolean = false>(options: Options<RedeemTokensData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<RedeemTokensResponse, RedeemTokensError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/token/redeem',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Burn tokens from one address.
 * The `burn` endpoint allows users to burn tokens of a fungible token on the Mina blockchain from one address.
 * The sender must have sufficient balance and appropriate permissions to perform the burn.
 *
 */
export const burnTokens = <ThrowOnError extends boolean = false>(options: Options<BurnTokensData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BurnTokensResponse, BurnTokensError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/token/burn',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Place a bid on a token
 * Allows users to place a bid on an token.
 *
 */
export const tokenBid = <ThrowOnError extends boolean = false>(options: Options<TokenBidData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TokenBidResponse, TokenBidError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/token/bid/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Create an offer to sell tokens at a specified price.
 * Allows users to create an offer to sell a specified amount of tokens at a given price.
 *
 */
export const tokenOffer = <ThrowOnError extends boolean = false>(options: Options<TokenOfferData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<TokenOfferResponse, TokenOfferError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/token/offer/create',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Purchase tokens from an existing offer.
 * Allows users to purchase tokens from an existing offer on the Mina blockchain.
 * This endpoint facilitates the transaction where tokens are transferred from the offer address to the buyer's address in exchange for the specified price.
 *
 */
export const buyTokens = <ThrowOnError extends boolean = false>(options: Options<BuyTokensData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<BuyTokensResponse, BuyTokensError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/token/offer/buy',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Sell a token to the Bid contract.
 * Allows token owners to sell their tokens to the Bid contract.
 *
 */
export const sellTokens = <ThrowOnError extends boolean = false>(options: Options<SellTokensData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<SellTokensResponse, SellTokensError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/token/bid/sell',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Withdraw a previously placed bid on an token.
 * Allows users to withdraw a bid they have previously placed using the `/bid` endpoint.
 * This transaction cancels the active bid, releasing any locked funds.
 *
 */
export const withdrawTokenBid = <ThrowOnError extends boolean = false>(options: Options<WithdrawTokenBidData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WithdrawTokenBidResponse, WithdrawTokenBidError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/token/bid/withdraw',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Withdraw a previously made offer to sell a token.
 * Allows users to withdraw an offer they have previously made using the `/offer` endpoint.
 * This transaction cancels the active offer, releasing any locked tokens.
 *
 */
export const withdrawTokenOffer = <ThrowOnError extends boolean = false>(options: Options<WithdrawTokenOfferData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<WithdrawTokenOfferResponse, WithdrawTokenOfferError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/token/offer/withdraw',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update the bid whitelist
 * Allows administrators to update the whitelist of addresses permitted to interact with the Bid contract.
 * This is essential for managing participation in bidding processes, especially for controlled or private auctions.
 *
 */
export const updateTokenBidWhitelist = <ThrowOnError extends boolean = false>(options: Options<UpdateTokenBidWhitelistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateTokenBidWhitelistResponse, UpdateTokenBidWhitelistError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/token/bid/whitelist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update the offer whitelist
 * Allows administrators to update the whitelist of addresses permitted to interact with the Offer contract.
 * This is essential for managing participation in offer processes, especially for controlled or private sales.
 *
 */
export const updateTokenOfferWhitelist = <ThrowOnError extends boolean = false>(options: Options<UpdateTokenOfferWhitelistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateTokenOfferWhitelistResponse, UpdateTokenOfferWhitelistError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/token/offer/whitelist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};

/**
 * Update the advanced admin whitelist
 * Allows administrators to update the whitelist of admin contracts.
 *
 */
export const updateTokenAdminWhitelist = <ThrowOnError extends boolean = false>(options: Options<UpdateTokenAdminWhitelistData, ThrowOnError>) => {
    return (options.client ?? _heyApiClient).post<UpdateTokenAdminWhitelistResponse, UpdateTokenAdminWhitelistError, ThrowOnError>({
        security: [
            {
                name: 'x-api-key',
                type: 'apiKey'
            }
        ],
        url: '/token/admin/whitelist',
        ...options,
        headers: {
            'Content-Type': 'application/json',
            ...options?.headers
        }
    });
};