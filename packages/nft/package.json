{
  "name": "@silvana-one/nft",
  "description": "Mina NFT library",
  "version": "1.0.14",
  "author": "DFST",
  "bugs": "https://github.com/SilvanaOne/silvana-lib/issues",
  "dependencies": {
    "tslib": "^2.8.1"
  },
  "devDependencies": {
    "@silvana-one/mina-utils": "1.0.14",
    "@silvana-one/storage": "1.0.14",
    "@silvana-one/token": "1.0.14",
    "@silvana-one/upgradable": "1.0.14",
    "@types/node": "^22.15.24",
    "c8": "^10.1.3",
    "dotenv": "^16.5.0",
    "esbuild": "^0.25.5",
    "o1js": "^2.5.0",
    "ts-node": "^10.9.2",
    "typescript": "^5.8.3",
    "unique-names-generator": "^4.7.1"
  },
  "engines": {
    "node": ">=20.0.0"
  },
  "exports": {
    "types": "./dist/node/index.d.ts",
    "node": {
      "import": "./dist/node/index.js",
      "require": "./dist/node/index.cjs"
    },
    "browser": "./dist/web/index.js",
    "default": "./dist/web/index.js"
  },
  "files": [
    "dist",
    "src",
    "package.json",
    "README.md",
    "LICENSE"
  ],
  "homepage": "https://docs.minanft.com",
  "keywords": [
    "mina-protocol",
    "MinaNFT",
    "NFT",
    "typescript"
  ],
  "license": "Apache-2.0",
  "main": "dist/web/index.js",
  "peerDependencies": {
    "@silvana-one/storage": "1.0.14",
    "@silvana-one/token": "1.0.14",
    "@silvana-one/upgradable": "1.0.14",
    "o1js": "^2.4.0"
  },
  "publishConfig": {
    "access": "public"
  },
  "repository": "SilvanaOne/silvana-lib.git",
  "scripts": {
    "build": "rm -rf dist && tsc --build tsconfig.node.json && tsc --build tsconfig.web.json && node build-cjs.js",
    "login": "npm login",
    "release": "npm publish --access public",
    "coverage": "rm -rf coverage && node --max-old-space-size=8192 ../../node_modules/.bin/c8 --merge-async npm run local:all",
    "coverage:report": "node --max-old-space-size=8192 ../../node_modules/.bin/c8 report",
    "test": "NODE_NO_WARNINGS=1 node --loader=ts-node/esm --enable-source-maps -r dotenv/config --require dotenv/config --env-file=.env --test",
    "local:contract": "CHAIN=local CLOUD=local ADVANCED=false npm run test test/contract.test.ts",
    "devnet:contract": "CHAIN=devnet CLOUD=local ADVANCED=false npm run test test/contract.test.ts",
    "lightnet:contract": "CHAIN=lightnet CLOUD=local ADVANCED=false npm run test test/contract.test.ts",
    "zeko:contract": "CHAIN=zeko CLOUD=local ADVANCED=false npm run test test/contract.test.ts",
    "local:bb": "CHAIN=local CLOUD=local npm run test test/bb.test.ts",
    "devnet:bb": "CHAIN=devnet CLOUD=local npm run test test/bb.test.ts",
    "lightnet:bb": "CHAIN=lightnet CLOUD=local npm run test test/bb.test.ts",
    "zeko:bb": "CHAIN=zeko CLOUD=local npm run test test/bb.test.ts",
    "local:auction": "CHAIN=local CLOUD=local SHARES=true WITHDRAW=false APPROVE_TRANSFER=true ADVANCED=true NO_LOG=false npm run test test/auction.test.ts",
    "devnet:auction": "CHAIN=devnet CLOUD=local SHARES=true WITHDRAW=false APPROVE_TRANSFER=true ADVANCED=true NO_LOG=false npm run test test/auction.test.ts",
    "zeko:auction": "CHAIN=zeko CLOUD=local SHARES=true WITHDRAW=false APPROVE_TRANSFER=true ADVANCED=true NO_LOG=false npm run test test/auction.test.ts",
    "lightnet:auction": "CHAIN=lightnet CLOUD=local SHARES=true WITHDRAW=false APPROVE_TRANSFER=true ADVANCED=true NO_LOG=false npm run test test/auction.test.ts",
    "local:mint": "CHAIN=local CLOUD=local npm run test test/mint.test.ts",
    "devnet:mint": "CHAIN=devnet CLOUD=local npm run test test/mint.test.ts",
    "lightnet:mint": "CHAIN=lightnet CLOUD=local npm run test test/mint.test.ts",
    "devnet:algolia": "CHAIN=devnet npm run test test/algolia.test.ts",
    "local:zkprogram": "CHAIN=local CLOUD=local READ_ONLY=false npm run test test/zkprogram.test.ts",
    "devnet:zkprogram": "CHAIN=devnet CLOUD=local READ_ONLY=false npm run test test/zkprogram.test.ts",
    "lightnet:zkprogram": "CHAIN=lightnet CLOUD=local READ_ONLY=false npm run test test/zkprogram.test.ts",
    "local:auction:matrix": "CHAIN=local sh ./scripts/auction.zsh",
    "devnet:auction:matrix": "CHAIN=devnet sh ./scripts/auction.zsh",
    "zeko:auction:matrix": "CHAIN=zeko sh ./scripts/auction.zsh",
    "devnet:auction:rerun": "CHAIN=devnet RERUN=6 sh ./scripts/auction.zsh",
    "lightnet:auction:matrix": "CHAIN=lightnet sh ./scripts/auction.zsh",
    "local:contract:matrix": "CHAIN=local sh ./scripts/contract.zsh",
    "devnet:contract:matrix": "CHAIN=devnet sh ./scripts/contract.zsh",
    "lightnet:contract:matrix": "CHAIN=lightnet sh ./scripts/contract.zsh",
    "zeko:contract:matrix": "CHAIN=zeko sh ./scripts/contract.zsh",
    "local:zkprogram:matrix": "CHAIN=local sh ./scripts/zkprogram.zsh",
    "devnet:zkprogram:matrix": "CHAIN=devnet sh ./scripts/zkprogram.zsh",
    "lightnet:zkprogram:matrix": "CHAIN=lightnet sh ./scripts/zkprogram.zsh",
    "zeko:zkprogram:matrix": "CHAIN=zeko sh ./scripts/zkprogram.zsh",
    "packed": "npm run test test/pack.test.ts",
    "div": "npm run test test/div.test.ts",
    "metadata": "npm run test test/metadata.test.ts",
    "local:all": "npm run packed && npm run div && npm run metadata && NO_LOG=true npm run local:mint && npm run local:contract:matrix && npm run local:auction:matrix && npm run local:zkprogram:matrix && NO_LOG=true npm run local:bb",
    "devnet:all": "npm run packed && npm run div && npm run metadata && NO_LOG=true npm run devnet:mint && npm run devnet:contract:matrix && npm run devnet:auction:matrix && npm run devnet:zkprogram:matrix && NO_LOG=true npm run devnet:bb",
    "zeko:all": "npm run packed && npm run div && npm run metadata && NO_LOG=true npm run zeko:mint && npm run zeko:contract:matrix && npm run zeko:auction:matrix && npm run zeko:zkprogram:matrix && NO_LOG=true npm run zeko:bb",
    "lightnet:all": "npm run packed && npm run div && NO_LOG=true npm run metadata && NO_LOG=true npm run lightnet:mint && npm run lightnet:contract:matrix && npm run lightnet:auction:matrix && npm run lightnet:zkprogram:matrix && NO_LOG=true npm run lightnet:bb"
  },
  "type": "module",
  "types": "./dist/node/index.d.ts",
  "c8": {
    "extension": [
      ".ts"
    ],
    "include": [
      "src/**"
    ],
    "exclude": [
      "test/**",
      "dist/**",
      "coverage/**",
      "scripts/**",
      "**/*.d.ts"
    ],
    "reporter": [
      "text",
      "lcov",
      "html",
      "json"
    ],
    "all": true,
    "instrument": true,
    "source-map": true,
    "produce-source-map": true
  }
}
